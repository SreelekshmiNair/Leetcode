Consider the following binary tree:

        1
       / \
      2   3
     / \
    4   5
		
Node 1 is the root, Node 2 and Node 3 are its children, and Node 4 and Node 5 are children of Node 2.
Steps in DFS:
**1. Start at Node 1:**
We call MaxDepth(Node 1).
**2. Explore the left subtree of Node 1 (i.e., Node 2):**
We call MaxDepth(Node 2).
**3. Explore the left subtree of Node 2 (i.e., Node 4):**
We call MaxDepth(Node 4).
Node 4 is a leaf node, so both its left and right children are null.
We return a depth of 0 for both left and right children.
The depth at Node 4 is 1 + max(0, 0) = 1.
**Return depth 1 to Node 2.**
**4. Explore the right subtree of Node 2 (i.e., Node 5):**
We call MaxDepth(Node 5).
Node 5 is a leaf node, so both its left and right children are null.
We return a depth of 0 for both left and right children.
The depth at Node 5 is 1 + max(0, 0) = 1.
Return depth 1 to Node 2.
**5. Compute the depth of Node 2:**
At Node 2, the depth is 1 + max(depth of left subtree, depth of right subtree) = 1 + max(1, 1) = 2.
Return depth 2 to Node 1.
**6. Explore the right subtree of Node 1 (i.e., Node 3):**
We call MaxDepth(Node 3).
Node 3 is a leaf node, so both its left and right children are null.
We return a depth of 0 for both left and right children.
The depth at Node 3 is 1 + max(0, 0) = 1.
Return depth 1 to Node 1.
**7. Compute the depth of Node 1:**
At Node 1, the depth is 1 + max(depth of left subtree, depth of right subtree) = 1 + max(2, 1) = 3.
Return depth 3.
Final Answer:
The maximum depth of the binary tree is 3.

Visual Representation of Steps:
At Node 1:

Left depth = 2 (from Node 2)
Right depth = 1 (from Node 3)
Max depth at Node 1 = 1 + max(2, 1) = 3
At Node 2:

Left depth = 1 (from Node 4)
Right depth = 1 (from Node 5)
Max depth at Node 2 = 1 + max(1, 1) = 2
At Node 3:

No left or right children, so depth = 1.


**Time Complexity:**
In the worst case, we need to visit every node in the binary tree once, so the time complexity is O(N), where N is the number of nodes in the tree.
**Space Complexity:**
Recursion Depth: The space complexity is primarily due to the recursion stack. In the worst case (unbalanced tree), the recursion depth could be N, so the space complexity is O(H), where H is the height of the tree.
In the best case (balanced tree), the height would be O(log(N)).
Thus, the space complexity is O(H).


